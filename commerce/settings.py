"""
Django settings for commerce project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGIN_URL = '/login/'

LOGIN_REDIRECT_URL = 'profile'  # Redirects to the 'profile' URL pattern after login


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECERT_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = os.environ.get('DEBUG', 'False') == 'True'

DEBUG = True


ALLOWED_HOSTS = ['data-visualization-dot-sodium-airport-395522.wl.r.appspot.com', 'localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'storages',
    'auctions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'bootstrap4',
    'crispy_forms',
    'crispy_bootstrap4',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]


CSRF_TRUSTED_ORIGINS = ['https://data-visualization-dot-sodium-airport-395522.wl.r.appspot.com', 'http://127.0.0.1:8000']

ROOT_URLCONF = 'commerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # 'auctions.context_processors.categories',
                # 'auctions.context_processors.category_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'commerce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': 'postgres',
        'PASSWORD': os.getenv('SUPABASE_PW'),
        'HOST': 'db.antowpgqpbqtojkbdbzx.supabase.co',
        'PORT': '5432',
    }
}

AUTH_USER_MODEL = 'auctions.User'

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# Google Cloud Storage settings for default file storage (user-uploaded files)
DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
# Name of google cloud storage bucket to use
GS_BUCKET_NAME = 'ebaylite_images_bucket'
# Google Cloud Project ID
GS_PROJECT_ID = 'sodium-airport-395522'



## get service account key from google cloud secret manager and not locally
# from google.cloud import secretmanager

# def access_secret_version(secret_id, version_id="latest"):
#     """
#     Accesses the payload of the given secret version if it's enabled.
#     """
#     project_id = "900097547124"
#     # Create the Secret Manager client.
#     client = secretmanager.SecretManagerServiceClient()
#     # Build the resource name of the secret version.
#     name = f"projects/{project_id}/secrets/{secret_id}/versions/{version_id}"
#     # Access the secret version.
#     response = client.access_secret_version(request={"name": name})
#     payload = response.payload.data.decode("UTF-8")
#     return payload


# GOOGLE_APPLICATION_CREDENTIALS_JSON = access_secret_version("GOOGLE_APPLICATION_CREDENTIALS_JSON")


GOOGLE_APPLICATION_CREDENTIALS = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS_JSON")


# static files (javascript, css, images) from local machine
# uploads to google cloud storage
STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
GS_DEFAULT_ACL = None
STATIC_URL = 'https://storage.googleapis.com/ebaylite_images_bucket/static/'

# Media files 
MEDIA_URL = 'https://storage.googleapis.com/ebaylite_images_bucket/media/'


# Auto-created primary key used when not defining a primary key type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


CRISPY_TEMPLATE_PACK = 'bootstrap4'


AUTH_PASSWORD_VALIDATORS = []

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'alora.greer@gmail.com'
EMAIL_HOST_PASSWORD = os.getenv('GMAIL_PASSWORD')
